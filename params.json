{"name":"Bldr","tagline":"A minimalist JSON templating DSL for Rails and Sinatra","body":"Bldr is a tiny templating library for generating JSON responses for Rails and Sinatra applications.\r\n\r\nBldr is very concise, containing only four core methods:\r\n\r\n* `object`\r\n* `collection`\r\n* `attribute`\r\n* `attributes`\r\n\r\nThese four methods allow a great deal of flexibility and power in constructing JSON responses.\r\n\r\n## Installation\r\n\r\nIn your gemfile:\r\n\r\n```ruby\r\ngem 'bldr'\r\n```\r\n\r\n## Configuration\r\n\r\nNo additional configuration is required for rails applications.\r\n\r\nFor sinatra apps, dependening on whether you're using a modular or classic\r\napplication style, do one of the following:\r\n\r\n```ruby\r\n\r\n# Method 1: Classic style\r\n\r\nrequire 'sinatra/bldr'\r\n\r\nget '/hello' do\r\n  bldr :hello\r\nend\r\n\r\n\r\n# Method 2: Modular style\r\n\r\nrequire 'sinatra/bldr'\r\n\r\nclass MyApp < Sinatra::Base\r\n  register Sinatra::Bldr\r\nend\r\n```\r\n\r\n## Why\r\n\r\nIf you're building an API, `Model#to_json` just doesn't cut it. Besides the JSON\r\nrepresentation of your models arguably being a presentation concern, trying\r\nto cram all of this logic into an `#as_json` method quickly turns into pure chaos.\r\n\r\nThere are other json templating libraries available such as\r\n[rabl](https://github.com/nesquena/rabl) or [json_builder](https://github.com/dewski/json_builder).\r\nBldr is in the same vein as these libraries, but with a simpler synxtax.\r\n\r\n## Editor Syntax Support\r\n\r\n### Vim\r\n\r\nAdd this line to your .vimrc:\r\n\r\n```\r\nau BufRead,BufNewFile *.bldr set filetype=ruby\r\n```\r\n\r\n### Emacs\r\n\r\nAdd this to your `~/.emacs.d/init.el`:\r\n\r\n```\r\n(add-to-list 'auto-mode-alist '(\"\\\\.bldr$\" . ruby-mode))\r\n```\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2011-2013 Alex Sharp. See the MIT-LICENSE file for full\r\ncopyright information.","google":"UA-40649704-1","note":"Don't delete this file! It's used internally to help with page regeneration."}